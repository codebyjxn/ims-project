services:
  mongodb:
    image: mongo:7
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    restart: unless-stopped

  # Backend Application - Production
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=concert_booking
      - MONGODB_URI=mongodb://mongodb:27017/concert_booking
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=24h
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=concert_booking
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  mongodb_data:
  pgadmin_data:

networks:
  app-network:
    driver: bridge 